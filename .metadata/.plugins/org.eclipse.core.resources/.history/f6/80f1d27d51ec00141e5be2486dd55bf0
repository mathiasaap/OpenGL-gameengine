package rendering;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.lwjgl.LWJGLException;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.GL11;

import player.Controls;
import lighting.Light;
import matrix.Camera;
import mesh.MeshInstance;
import mesh.TexMesh;
import shaders.MeshShader;
import shaders.TerrainShader;
import shaders.WaterShader;
import terrain.Terrain;

public class Renderer {
	
	private MeshShader meshShader;
	private TerrainShader terrainShader;
	private WaterShader waterShader;
	
	boolean fullscreen=false;
	private RenderMesh renderMesh;
	private RenderTerrain renderTerrain;
	private RenderWater renderWater;
	private Controls control= new Controls();
	
	private Map<TexMesh, List<MeshInstance>> meshInstances = new HashMap<>();
	private List<Terrain> terrains = new ArrayList<>();
	
	
	public Renderer(MeshShader meshShader,TerrainShader terrainShader, WaterShader waterShader, LoadMesh loadmesh)
	{
		GL11.glEnable(GL11.GL_DEPTH_TEST);
		this.meshShader=meshShader;
		this.terrainShader=terrainShader;
		this.waterShader=waterShader;
		terrainShader.bindTexId();
		renderMesh= new RenderMesh(meshShader);
		renderTerrain= new RenderTerrain(terrainShader,loadmesh);
		renderWater= new RenderWater(waterShader,loadmesh);
		
		
	}
	public void setController(Controls control)
	{
		this.control=control;
	}
	
	public void render(Light light, Camera cam)
	{
		if(control.getF2())
		{
			if(!fullscreen)
			{
				fullscreen=true;
				try {
					Display.setFullscreen(true);
					System.out.println("fullscreen");
				} catch (LWJGLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		else{
			if(fullscreen)
			{
				fullscreen=false;
				try {
					Display.setFullscreen(false);
				} catch (LWJGLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
		}
		
		
		prepareScene();
		

		
		
		terrainShader.useProgram();
		terrainShader.uploadLight(light);
		renderTerrain.draw(terrains,control);
		terrainShader.unbindShader();
		terrains.clear();
		meshShader.useProgram();
		meshShader.uploadLight(light);
		renderMesh.draw(meshInstances);
		meshShader.unbindShader();
		meshInstances.clear();
		
		if(control.getF2()){
		waterShader.useProgram();
		waterShader.uploadLight(light);
		renderWater.draw(terrains);
		terrainShader.unbindShader();
		}

		
		

		
	}
	
	private void prepareScene()
	{
		GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
		//GL11.glClearColor(0.2f, 0.3f, 0.6f, 1.0f);
		GL11.glClearColor((80f/256f), (16f/256f), (0f/256f), 1.0f);
		
	}
	
	public void putInstance(MeshInstance mInstance)
	{
		TexMesh model = mInstance.getMesh();
		
		if(!meshInstances.containsKey(model))
		{
			List<MeshInstance> tmpLstMIns = new ArrayList<>();
			tmpLstMIns.add(mInstance);
			meshInstances.put(model, tmpLstMIns);
		}
		else
		{
			meshInstances.get(model).add(mInstance);
		}
	}
	
	public void putTerrain(Terrain terrain)
	{
		terrains.add(terrain);
	}
	
}
